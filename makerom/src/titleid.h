#pragma once

typedef enum
{
	PID_BAD_RSF_SET = -1,
	PID_INVALID_CATEGORY = -2,
	PID_INVALID_UNIQUE_ID = -3,
	PID_INVALID_VARIATION = -4,
} Pid_Errors;

typedef enum
{
	PROGRAM_ID_CATEGORY_FLAG_NORMAL                         = 0x00000,     
	PROGRAM_ID_CATEGORY_FLAG_DLP_CHILD                      = 0x00001,      
	PROGRAM_ID_CATEGORY_FLAG_DEMO                           = 0x00002,        
	PROGRAM_ID_CATEGORY_FLAG_CONTENTS                       = 0x00003,        
	PROGRAM_ID_CATEGORY_FLAG_ADD_ON_CONTENTS                = 0x00004, 
	PROGRAM_ID_CATEGORY_FLAG_PATCH                          = 0x00006, 
	PROGRAM_ID_CATEGORY_FLAG_CANNOT_EXECUTION               = 0x00008, 
	PROGRAM_ID_CATEGORY_FLAG_SYSTEM                         = 0x00010, 
	PROGRAM_ID_CATEGORY_FLAG_REQUIRE_BATCH_UPDATE           = 0x00020, 
	PROGRAM_ID_CATEGORY_FLAG_NOT_REQUIRE_USER_APPROVAL      = 0x00040, 
	PROGRAM_ID_CATEGORY_FLAG_NOT_REQUIRE_RIGHT_FOR_MOUNT    = 0x00080, 
	PROGRAM_ID_CATEGORY_FLAG_CAN_SKIP_CONVERT_JUMP_ID       = 0x00100,
	PROGRAM_ID_CATEGORY_FLAG_TWL                            = 0x08000,
	PROGRAM_ID_CATEGORY_FLAG_MANUAL							= 0x10000,
} ProgramIdCategoryFlag;

typedef enum
{
	PROGRAM_ID_CATEGORY_APPLICATION         = ( PROGRAM_ID_CATEGORY_FLAG_NORMAL ),

	PROGRAM_ID_CATEGORY_DLP_CHILD           = ( PROGRAM_ID_CATEGORY_FLAG_DLP_CHILD ),

	PROGRAM_ID_CATEGORY_DEMO                = ( PROGRAM_ID_CATEGORY_FLAG_DEMO ),

	PROGRAM_ID_CATEGORY_CONTENTS            = ( PROGRAM_ID_CATEGORY_FLAG_CONTENTS ),

	PROGRAM_ID_CATEGORY_PATCH               = ( PROGRAM_ID_CATEGORY_FLAG_CANNOT_EXECUTION
												| PROGRAM_ID_CATEGORY_FLAG_PATCH),

	PROGRAM_ID_CATEGORY_ADD_ON_CONTENTS     = ( PROGRAM_ID_CATEGORY_FLAG_ADD_ON_CONTENTS
												| PROGRAM_ID_CATEGORY_FLAG_CANNOT_EXECUTION
												| PROGRAM_ID_CATEGORY_FLAG_NOT_REQUIRE_RIGHT_FOR_MOUNT ),

	PROGRAM_ID_CATEGORY_FIRMWARE            = ( PROGRAM_ID_CATEGORY_FLAG_NORMAL
												| PROGRAM_ID_CATEGORY_FLAG_CANNOT_EXECUTION
												| PROGRAM_ID_CATEGORY_FLAG_SYSTEM
												| PROGRAM_ID_CATEGORY_FLAG_REQUIRE_BATCH_UPDATE
												| PROGRAM_ID_CATEGORY_FLAG_CAN_SKIP_CONVERT_JUMP_ID ),


	PROGRAM_ID_CATEGORY_BASE                = ( PROGRAM_ID_CATEGORY_FLAG_NORMAL
												| PROGRAM_ID_CATEGORY_FLAG_SYSTEM
												| PROGRAM_ID_CATEGORY_FLAG_REQUIRE_BATCH_UPDATE
												| PROGRAM_ID_CATEGORY_FLAG_CAN_SKIP_CONVERT_JUMP_ID ),


	PROGRAM_ID_CATEGORY_APPLET              = ( PROGRAM_ID_CATEGORY_FLAG_NORMAL
												| PROGRAM_ID_CATEGORY_FLAG_SYSTEM
												| PROGRAM_ID_CATEGORY_FLAG_REQUIRE_BATCH_UPDATE ),


	PROGRAM_ID_CATEGORY_SYSTEM_APPLICATION  = ( PROGRAM_ID_CATEGORY_FLAG_NORMAL
												| PROGRAM_ID_CATEGORY_FLAG_SYSTEM ),


	PROGRAM_ID_CATEGORY_SYSTEM_CONTENT      = ( PROGRAM_ID_CATEGORY_FLAG_CONTENTS
												| PROGRAM_ID_CATEGORY_FLAG_CANNOT_EXECUTION
												| PROGRAM_ID_CATEGORY_FLAG_SYSTEM ),


	PROGRAM_ID_CATEGORY_SHARED_CONTENT      = ( PROGRAM_ID_CATEGORY_FLAG_CONTENTS
												| PROGRAM_ID_CATEGORY_FLAG_CANNOT_EXECUTION
												| PROGRAM_ID_CATEGORY_FLAG_SYSTEM
												| PROGRAM_ID_CATEGORY_FLAG_NOT_REQUIRE_RIGHT_FOR_MOUNT ),


	PROGRAM_ID_CATEGORY_AUTO_UPDATE_CONTENT = ( PROGRAM_ID_CATEGORY_FLAG_CONTENTS
												| PROGRAM_ID_CATEGORY_FLAG_CANNOT_EXECUTION
												| PROGRAM_ID_CATEGORY_FLAG_SYSTEM
												| PROGRAM_ID_CATEGORY_FLAG_NOT_REQUIRE_USER_APPROVAL
												| PROGRAM_ID_CATEGORY_FLAG_NOT_REQUIRE_RIGHT_FOR_MOUNT ),

	PROGRAM_ID_CATEGORY_MANUAL		        = ( PROGRAM_ID_CATEGORY_FLAG_MANUAL ),

} ProgramIdCategory;

u64 ConvertTwlIdToCtrId(u64 pgid);

int GetProgramID(u64 *dest, rsf_settings *rsf, bool IsForExheader);
int GetUniqueID(u32 *dest, rsf_settings *rsf);

u32 GetTidCategory(u64 titleId);
u32 GetTidUniqueId(u64 titleId);

bool IsDemo(u32 Category);
bool IsSystem(u32 Category);
bool IsDlpChild(u32 Category);
bool IsPatch(u32 Category);
bool IsContents(u32 Category);
bool IsAddOnContent(u32 Category);
bool IsManual(u32 Category);
